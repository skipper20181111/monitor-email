// Code generated by goctl. DO NOT EDIT!

package cachemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	shrcbMonitorFieldNames          = builder.RawFieldNames(&ShrcbMonitor{})
	shrcbMonitorRows                = strings.Join(shrcbMonitorFieldNames, ",")
	shrcbMonitorRowsExpectAutoSet   = strings.Join(stringx.Remove(shrcbMonitorFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	shrcbMonitorRowsWithPlaceHolder = strings.Join(stringx.Remove(shrcbMonitorFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	shrcbMonitorModel interface {
		Insert(ctx context.Context, data *ShrcbMonitor) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ShrcbMonitor, error)
		Update(ctx context.Context, data *ShrcbMonitor) error
		Delete(ctx context.Context, id int64) error
		FindOneByName(ctx context.Context, name string) (*ShrcbMonitor, error)
		FindOneByNameLimitN(ctx context.Context, name string, n int) ([]*ShrcbMonitor, error)
		UpdateReported(ctx context.Context, status int, name string) error
		DeleteByTime(ctx context.Context, DayNumber int64) error
	}

	defaultShrcbMonitorModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ShrcbMonitor struct {
		Id             int64     `db:"id"`
		SystemName     string    `db:"system_name"`     // 系统英文名
		SystemNameZh   string    `db:"system_name_zh"`  // 系统中文名
		ReportTitle    string    `db:"report_title"`    // 报警标题
		ReportMsg      string    `db:"report_msg"`      // 报警信息
		ReportMarshal  string    `db:"report_marshal"`  // 报警内容的序列化数据
		ReportSeverity string    `db:"report_severity"` // 报警级别，major，critical，ok
		Reported       int64     `db:"reported"`        // 是否完成报警0->未报警;1->已报警;2->已抑制;
		GenerateTime   time.Time `db:"generate_time"`   // 有效日期
		ReportTime     time.Time `db:"report_time"`     // 失效日期
	}
)

func newShrcbMonitorModel(conn sqlx.SqlConn) *defaultShrcbMonitorModel {
	return &defaultShrcbMonitorModel{
		conn:  conn,
		table: "`shrcb_monitor`",
	}
}

func (m *defaultShrcbMonitorModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultShrcbMonitorModel) DeleteByTime(ctx context.Context, DayNumber int64) error {
	query := fmt.Sprintf("delete from %s where `generate_time` < ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, time.Now().Add(-time.Hour*time.Duration(24*DayNumber)))
	return err
}

func (m *defaultShrcbMonitorModel) FindOneByName(ctx context.Context, name string) (*ShrcbMonitor, error) {
	// 只看name，只读取最后一条
	query := fmt.Sprintf("select %s from %s where `system_name` = ? order by `generate_time` desc limit 1", shrcbMonitorRows, m.table)
	var resp ShrcbMonitor
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShrcbMonitorModel) FindOneByNameLimitN(ctx context.Context, name string, n int) ([]*ShrcbMonitor, error) {
	// 只看name，读取n条
	query := fmt.Sprintf("select %s from %s where  `system_name` = ?  order by `generate_time` desc limit ?", shrcbMonitorRows, m.table)
	var resp []*ShrcbMonitor
	err := m.conn.QueryRowsCtx(ctx, &resp, query, name, n)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShrcbMonitorModel) FindOne(ctx context.Context, id int64) (*ShrcbMonitor, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shrcbMonitorRows, m.table)
	var resp ShrcbMonitor
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShrcbMonitorModel) Insert(ctx context.Context, data *ShrcbMonitor) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, shrcbMonitorRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SystemName, data.SystemNameZh, data.ReportTitle, data.ReportMsg, data.ReportMarshal, data.ReportSeverity, data.Reported, data.GenerateTime, data.ReportTime)
	return ret, err
}

func (m *defaultShrcbMonitorModel) Update(ctx context.Context, data *ShrcbMonitor) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, shrcbMonitorRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SystemName, data.SystemNameZh, data.ReportTitle, data.ReportMsg, data.ReportMarshal, data.ReportSeverity, data.Reported, data.GenerateTime, data.ReportTime, data.Id)
	return err
}

func (m *defaultShrcbMonitorModel) UpdateReported(ctx context.Context, status int, name string) error {
	query := fmt.Sprintf("update %s set `reported`=? , `report_time`=? where `reported`=0 and `system_name` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, status, time.Now(), name)
	return err
}

func (m *defaultShrcbMonitorModel) tableName() string {
	return m.table
}
